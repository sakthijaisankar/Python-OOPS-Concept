# -*- coding: utf-8 -*-
"""Object Oriented Programing Language.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h-cvTNGQA8HUzZCTHCKYKFMPdeedNR7P

# OOPS CONCEPT
"""

class cpu:

  def __init__(self,mb,graphic,rand,rom,psu):
      self.motherboard = mb
      self.gpu = graphic
      self.ram = rand
      self.ssd = rom
      self.powersupply = psu

  def forgaming(self):
    print('the cpu is for gaming purpose')

  def forperformance(self):
    print('the '+self.gpu+' is for performance purpose')

cpu1 = cpu('asusrog','rtx3050','16gb','250gb','650w')
cpu2 = cpu('msa', 'gtx1080','42gb','2pk','1500w')

print(cpu1.motherboard)
print(cpu1.gpu)
print(cpu1.ram)
print(cpu1.ssd)
print(cpu1.powersupply)

cpu1.forgaming()
cpu1.forperformance()

print(cpu2.motherboard)
print(cpu2.gpu)
print(cpu2.ram)
print(cpu2.ssd)
print(cpu2.powersupply)

cpu2.forgaming()
cpu2.forperformance()

"""# Inheritance"""

class animal:

  alive = True

  def eat(self):
    print('this animal is eating')

  def sleep(self):
    print('this animal is sleeping')

class rabbit(animal):
  pass
class fish(animal):
  pass
class hawk(animal):
  pass

#object
rabbit = rabbit()
fish = fish()
hawk = hawk()

print(hawk.eat())

class animal:

  alive = True

  def eat(self):
    print('this animal is eating')

  def sleep(self):
    print('this animal is sleeping')

class rabbit(animal):
  def run(self):
    print('the rabbit can run faster')

class fish(animal):
  def swim(self):
    print('the fish can swim faster')

class hawk(animal):
  def fly(self):
    print('the hawk can fly faster')

#object
rabbit = rabbit()
fish = fish()
hawk = hawk()


rabbit.run()
fish.swim()
hawk.eat()

"""# Multilevel Inheritance"""

# multilevel inheritance = derived (child) class inherits another derived (child) class

class organisms:

  alive = True

  def earth(self):
    print('the organism is from earth')

class animals(organisms):

  def eat(self):
    print('the animal can eat')

class dog(animal):

  def bark(self):
    print('this dog can bark')

#object
organisms = organisms()
animals = animals()
dog = dog()

organisms.alive
animals.alive
animals.eat()
dog.alive
dog.eat()
dog.bark()

"""# Multiple Inheritance"""

# multiple Inheritance = when a child class derived from more than one parent class

class prey:

  def flee(self):
    print('this animal flee')

class predator:

  def hunt(self):
    print('this animal hunt')

class rabbit(prey):
  pass

class hawk(predator):
  pass

class fish(prey, predator):
  pass

#object
rabbit = rabbit()
hawk = hawk()
fish = fish()

rabbit.flee()
hawk.hunt()
fish.flee()
fish.hunt()

"""# Overriding"""

class animal:
  def eat(self):
    print('this animal is eating')

class rabbit(animal):
  def eat(self):
    print('this rabbit eating carrot')

rabbit = rabbit()

rabbit.eat()

"""# Method Chaining"""

#method chaining = calling multiple methods sequentially, each call performs an action on the same object and returns self

class car:

  def turn_on(self):
    print('youre starting the engine')
    return self

  def drive(self):
    print('youre driving the car')
    return self

  def brake(self):
    print('you step on the brakes')
    return self

  def turn_off(self):
    print('youre trunofing the engine')
    return self

car = car()

car.turn_on()
car.drive()

car.turn_on().drive() # in this case first pyton prints the statement for turn_on class and then it will go to self which is car class then it will call the drive

car.turn_on()\
    .drive()\
    .brake()\
    .turn_off()

"""# Super Function"""

# Super() = function used to give access to methods of a parent class, returns a temporary object of a parent class when used

class rectangle:
  pass

class square(rectangle):

  def __init__(self, length, width):   #the statements used in this program is repeted in cube class so we can change this into parent class and use super function to call
    self.length = length
    self.width = width

class cube(rectangle):

  def __init__(self, length, width,height):
    self.length = length
    self.width = width
    self.height = height

square = square(3,3)
cube = cube(3,3,3)

class rectangle:

  def __init__(self, length, width):
    self.length = length
    self.width = width

class square(rectangle):

  def __init__(self, length, width):
    super().__init__(length, width)

  def area(self):
    return self.length*self.width

class cube(rectangle):

  def __init__(self, length, width,height):
    super().__init__(length, width)
    self.height = height

  def volume(self):
    return self.length*self.width*self.height

square = square(3,3)
cube = cube(3,3,3)

print(square.area())
print(cube.volume())

